{"version":3,"sources":["getWeb3.js","App.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","App","useState","accounts","setAccounts","contract","setContract","pending","setPending","useEffect","initWeb3","eth","getAccounts","instance","Contract","Faucet","abi","address","alert","error","sendToken","methods","send","from","gas","res","status","className","onClick","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"q8CAqCeA,EAnCC,kBACZ,IAAIC,SAAQ,SAACC,EAASC,GAElBC,OAAOC,iBAAiB,OAAxB,gCAAgC,wGAExBD,OAAOE,SAFiB,wBAGlBC,EAAO,IAAIC,IAAKJ,OAAOE,UAHL,kBAMdF,OAAOE,SAASG,SANF,OAQpBP,EAAQK,GARY,gDAUpBJ,EAAO,EAAD,IAVc,gCAcnBC,OAAOG,MAENA,EAAOH,OAAOG,KACpBG,QAAQC,IAAI,2BACZT,EAAQK,KAIFK,EAAW,IAAIJ,IAAKK,UAAUC,aAChC,yBAEEP,EAAO,IAAIC,IAAKI,GACtBF,QAAQC,IAAI,gDACZT,EAAQK,IA3BgB,8D,QCqDzBQ,MApDf,WACI,MAAgCC,mBAAS,MAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAgCF,mBAAS,MAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KAEAC,qBAAU,WACN,IAAMC,EAAQ,iDAAG,2HAEUxB,IAFV,cAEHO,EAFG,gBAGcA,EAAKkB,IAAIC,cAHvB,OAGHT,EAHG,OAKHU,EAAW,IAAIpB,EAAKkB,IAAIG,SAC1BC,EAAOC,IACPD,EAAOE,SAGXb,EAAYD,GACZG,EAAYO,GAXH,kDAcTK,MAAM,0EACNtB,QAAQuB,MAAR,MAfS,0DAAH,qDAkBdT,MACD,IAEH,IAAMU,EAAS,iDAAG,kGACVb,EADU,wDAEdC,GAAW,GAFG,kBAIQH,EAASgB,QAAQC,OAAOA,KAAK,CAAEC,KAAMpB,EAAS,GAAIqB,IAAK,YAJ/D,OAIJC,EAJI,OAKV7B,QAAQC,IAAI4B,GACRA,EAAIC,QACJR,MAAM,WAPA,kDAUVA,MAAM,wBACNtB,QAAQuB,MAAR,MAXU,QAadX,GAAW,GAbG,0DAAH,qDAgBf,OACI,qBAAKmB,UAAU,YAAf,SACI,qBAAKA,UAAU,SAASC,QAASR,EAAjC,SACKb,EAAU,cAAgB,yBC9C9BsB,IAASC,WAAWC,SAASC,eAAe,SAEpDC,OACD,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,S","file":"static/js/main.16c72472.chunk.js","sourcesContent":["import Web3 from 'web3'\n\nconst getWeb3 = () =>\n    new Promise((resolve, reject) => {\n        // Wait for loading completion to avoid race conditions with web3 injection timing.\n        window.addEventListener('load', async () => {\n            // Modern dapp browsers...\n            if (window.ethereum) {\n                const web3 = new Web3(window.ethereum)\n                try {\n                    // Request account access if needed\n                    await window.ethereum.enable()\n                    // Accounts now exposed\n                    resolve(web3)\n                } catch (error) {\n                    reject(error)\n                }\n            }\n            // Legacy dapp browsers...\n            else if (window.web3) {\n                // Use Mist/MetaMask's provider.\n                const web3 = window.web3\n                console.log('Injected web3 detected.')\n                resolve(web3)\n            }\n            // Fallback to localhost use dev console port by default...\n            else {\n                const provider = new Web3.providers.HttpProvider(\n                    'http://127.0.0.1:8545'\n                )\n                const web3 = new Web3(provider)\n                console.log('No web3 instance injected, using Local web3.')\n                resolve(web3)\n            }\n        })\n    })\n\nexport default getWeb3","import { useEffect, useState } from 'react'\nimport Faucet from './ABI/faucet.json'\nimport './App.css'\n\nimport getWeb3 from './getWeb3'\n\nfunction App() {\n    const [accounts, setAccounts] = useState(null)\n    const [contract, setContract] = useState(null)\n    const [pending, setPending] = useState(false)\n\n    useEffect(() => {\n        const initWeb3 = async () => {\n            try {\n                const web3 = await getWeb3()\n                const accounts = await web3.eth.getAccounts()\n\n                const instance = new web3.eth.Contract(\n                    Faucet.abi,\n                    Faucet.address\n                )\n\n                setAccounts(accounts)\n                setContract(instance)\n\n            } catch (error) {\n                alert(`Failed to load web3, accounts, or contract. Check console for details.`)\n                console.error(error)\n            }\n        }\n        initWeb3()\n    }, [])\n\n    const sendToken = async () => {\n        if (pending) return\n        setPending(true)\n        try {\n            const res = await contract.methods.send().send({ from: accounts[0], gas: '3000000' })\n            console.log(res)\n            if (res.status) {\n                alert('Success')\n            }\n        } catch (error) {\n            alert('Something went wrong')\n            console.error(error)\n        }\n        setPending(false)\n    }\n\n    return (\n        <div className=\"container\">\n            <div className='button' onClick={sendToken}>\n                {pending ? 'Pending ...' : 'Give me some FX !'}\n            </div>\n        </div>\n    )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport './index.css'\n\nimport App from './App'\n\nconst root = ReactDOM.createRoot(document.getElementById('root'))\n\nroot.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>\n)"],"sourceRoot":""}